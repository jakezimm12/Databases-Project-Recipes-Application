{"ast":null,"code":"var _jsxFileName = \"/Users/yue0815/Documents/GitHub/Schola/CIS550/HW2/client/src/pages/AlbumsPage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Box, Container } from '@mui/material';\nimport { NavLink } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = require('../config.json');\nexport default function AlbumsPage() {\n  _s();\n  const [albums, setAlbums] = useState([]);\n  useEffect(() => {\n    fetch(`http://${config.server_host}:${config.server_port}/albums`).then(res => res.json()).then(resJson => setAlbums(resJson));\n  }, []);\n\n  // flexFormat provides the formatting options for a \"flexbox\" layout that enables the album cards to\n  // be displayed side-by-side and wrap to the next line when the screen is too narrow. Flexboxes are\n  // incredibly powerful. You can learn more on MDN web docs linked below (or many other online resources)\n  // https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox\n  const flexFormat = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-evenly'\n  };\n  return (\n    /*#__PURE__*/\n    // TODO (TASK 22): replace the empty object {} in the Container's style property with flexFormat. Observe the change to the Albums page.\n    // TODO (TASK 22): then uncomment the code to display the cover image and once again observe the change, i.e. what happens to the layout now that each album card has a fixed width?\n    _jsxDEV(Container, {\n      style: {\n        flexFormat\n      },\n      children: albums.map(album => /*#__PURE__*/_jsxDEV(Box, {\n        p: 3,\n        m: 2,\n        style: {\n          background: 'white',\n          borderRadius: '16px',\n          border: '2px solid #000'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: /*#__PURE__*/_jsxDEV(NavLink, {\n            to: `/albums/${album.album_id}`,\n            children: album.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, album.album_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(AlbumsPage, \"lc/MwnjIUvbE/gAfqQrGJiZthlY=\");\n_c = AlbumsPage;\nvar _c;\n$RefreshReg$(_c, \"AlbumsPage\");","map":{"version":3,"names":["useEffect","useState","Box","Container","NavLink","config","require","AlbumsPage","albums","setAlbums","fetch","server_host","server_port","then","res","json","resJson","flexFormat","display","flexDirection","flexWrap","justifyContent","map","album","background","borderRadius","border","album_id","title"],"sources":["/Users/yue0815/Documents/GitHub/Schola/CIS550/HW2/client/src/pages/AlbumsPage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Box, Container } from '@mui/material';\nimport { NavLink } from 'react-router-dom';\n\nconst config = require('../config.json');\n\nexport default function AlbumsPage() {\n  const [albums, setAlbums] = useState([]);\n\n  useEffect(() => {\n    fetch(`http://${config.server_host}:${config.server_port}/albums`)\n      .then(res => res.json())\n      .then(resJson => setAlbums(resJson));\n  }, []);\n\n  // flexFormat provides the formatting options for a \"flexbox\" layout that enables the album cards to\n  // be displayed side-by-side and wrap to the next line when the screen is too narrow. Flexboxes are\n  // incredibly powerful. You can learn more on MDN web docs linked below (or many other online resources)\n  // https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox\n  const flexFormat = { display: 'flex', flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-evenly' };\n\n  return (\n    // TODO (TASK 22): replace the empty object {} in the Container's style property with flexFormat. Observe the change to the Albums page.\n    // TODO (TASK 22): then uncomment the code to display the cover image and once again observe the change, i.e. what happens to the layout now that each album card has a fixed width?\n    <Container style={{flexFormat}}>\n      {albums.map((album) =>\n        <Box\n          key={album.album_id}\n          p={3}\n          m={2}\n          style={{ background: 'white', borderRadius: '16px', border: '2px solid #000' }}\n        >\n          {/*\n          <img\n            src={album.thumbnail_url}\n            alt={`${album.title} album art`}\n          />\n          */}\n          <h4><NavLink to={`/albums/${album.album_id}`}>{album.title}</NavLink></h4>\n        </Box>\n      )}\n    </Container>\n  );\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,GAAG,EAAEC,SAAS,QAAQ,eAAe;AAC9C,SAASC,OAAO,QAAQ,kBAAkB;AAAC;AAE3C,MAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAExC,eAAe,SAASC,UAAU,GAAG;EAAA;EACnC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACdU,KAAK,CAAE,UAASL,MAAM,CAACM,WAAY,IAAGN,MAAM,CAACO,WAAY,SAAQ,CAAC,CAC/DC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACG,OAAO,IAAIP,SAAS,CAACO,OAAO,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA,MAAMC,UAAU,GAAG;IAAEC,OAAO,EAAE,MAAM;IAAEC,aAAa,EAAE,KAAK;IAAEC,QAAQ,EAAE,MAAM;IAAEC,cAAc,EAAE;EAAe,CAAC;EAE9G;IAAA;IACE;IACA;IACA,QAAC,SAAS;MAAC,KAAK,EAAE;QAACJ;MAAU,CAAE;MAAA,UAC5BT,MAAM,CAACc,GAAG,CAAEC,KAAK,iBAChB,QAAC,GAAG;QAEF,CAAC,EAAE,CAAE;QACL,CAAC,EAAE,CAAE;QACL,KAAK,EAAE;UAAEC,UAAU,EAAE,OAAO;UAAEC,YAAY,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAiB,CAAE;QAAA,uBAQ/E;UAAA,uBAAI,QAAC,OAAO;YAAC,EAAE,EAAG,WAAUH,KAAK,CAACI,QAAS,EAAE;YAAA,UAAEJ,KAAK,CAACK;UAAK;YAAA;YAAA;YAAA;UAAA;QAAW;UAAA;UAAA;UAAA;QAAA;MAAK,GAXrEL,KAAK,CAACI,QAAQ;QAAA;QAAA;QAAA;MAAA,QAYf;IACP;MAAA;MAAA;MAAA;IAAA;EACS;AAEhB;AAAC,GArCuBpB,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}