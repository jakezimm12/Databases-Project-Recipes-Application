{"ast":null,"code":"var _jsxFileName = \"/Users/yue0815/Documents/GitHub/Schola/CIS550/HW2/client/src/pages/HomePage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Container, Divider, Link } from '@mui/material';\nimport { NavLink } from 'react-router-dom';\nimport LazyTable from '../components/LazyTable';\nimport SongCard from '../components/SongCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = require('../config.json');\nexport default function HomePage() {\n  _s();\n  // We use the setState hook to persist information across renders (such as the result of our API calls)\n  const [songOfTheDay, setSongOfTheDay] = useState({});\n  // TODO (TASK 13): add a state variable to store the app author (default to '')\n  const [author, setAuthor] = useState(\"\");\n  const [selectedSongId, setSelectedSongId] = useState(null);\n\n  // The useEffect hook by default runs the provided callback after every render\n  // The second (optional) argument, [], is the dependency array which signals\n  // to the hook to only run the provided callback if the value of the dependency array\n  // changes from the previous render. In this case, an empty array means the callback\n  // will only run on the very first render.\n  useEffect(() => {\n    // Fetch request to get the song of the day. Fetch runs asynchronously.\n    // The .then() method is called when the fetch request is complete\n    // and proceeds to convert the result to a JSON which is finally placed in state.\n    fetch(`http://${config.server_host}:${config.server_port}/random`).then(res => res.json()).then(resJson => setSongOfTheDay(resJson));\n\n    // TODO (TASK 14): add a fetch call to get the app author (name not pennkey) and store it in the state variable\n    fetch(`http://${config.server_host}:${config.server_port}/author/name`, {\n      method: \"GET\"\n    }).then(res => res.text())\n    // .then(res => console.log(res));\n    .then(resJson => setAuthor(resJson));\n  }, []);\n\n  // Here, we define the columns of the \"Top Songs\" table. The songColumns variable is an array (in order)\n  // of objects with each object representing a column. Each object has a \"field\" property representing\n  // what data field to display from the raw data, \"headerName\" property representing the column label,\n  // and an optional renderCell property which given a row returns a custom JSX element to display in the cell.\n  const songColumns = [{\n    field: 'title',\n    headerName: 'Song Title',\n    renderCell: row => /*#__PURE__*/_jsxDEV(Link, {\n      onClick: () => setSelectedSongId(row.song_id),\n      children: row.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 28\n    }, this) // A Link component is used just for formatting purposes\n  }, {\n    field: 'album',\n    headerName: 'Album',\n    renderCell: row => /*#__PURE__*/_jsxDEV(NavLink, {\n      to: `/albums/${row.album_id}`,\n      children: row.album\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 28\n    }, this) // A NavLink component is used to create a link to the album page\n  }, {\n    field: 'plays',\n    headerName: 'Plays'\n  }];\n\n  // TODO (TASK 15): define the columns for the top albums (schema is Album Title, Plays), where Album Title is a link to the album page\n  // Hint: this should be very similar to songColumns defined above, but has 2 columns instead of 3\n  const albumColumns = [{\n    field: 'title',\n    headerName: 'Album Title',\n    renderCell: row => /*#__PURE__*/_jsxDEV(NavLink, {\n      to: `/albums/${row.album_id}`,\n      children: row.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 28\n    }, this) // A NavLink component is used to create a link to the album page\n  }, {\n    field: 'plays',\n    headerName: 'Plays'\n  }];\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [selectedSongId && /*#__PURE__*/_jsxDEV(SongCard, {\n      songId: selectedSongId,\n      handleClose: () => setSelectedSongId(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Check out your song of the day:\\xA0\", /*#__PURE__*/_jsxDEV(Link, {\n        onClick: () => setSelectedSongId(songOfTheDay.song_id),\n        children: songOfTheDay.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LazyTable, {\n      route: `http://${config.server_host}:${config.server_port}/top_songs`,\n      columns: songColumns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Albums\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LazyTable, {\n      route: `http://${config.server_host}:${config.server_port}/top_albums`,\n      columns: albumColumns,\n      defaultPageSize: 5,\n      rowsPerPageOptions: [5, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"1ZUYq2QcvhOhX8tJM5LopH7Fdkk=\");\n_c = HomePage;\n;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["useEffect","useState","Container","Divider","Link","NavLink","LazyTable","SongCard","config","require","HomePage","songOfTheDay","setSongOfTheDay","author","setAuthor","selectedSongId","setSelectedSongId","fetch","server_host","server_port","then","res","json","resJson","method","text","songColumns","field","headerName","renderCell","row","song_id","title","album_id","album","albumColumns"],"sources":["/Users/yue0815/Documents/GitHub/Schola/CIS550/HW2/client/src/pages/HomePage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Container, Divider, Link } from '@mui/material';\nimport { NavLink } from 'react-router-dom';\n\nimport LazyTable from '../components/LazyTable';\nimport SongCard from '../components/SongCard';\nconst config = require('../config.json');\n\nexport default function HomePage() {\n  // We use the setState hook to persist information across renders (such as the result of our API calls)\n  const [songOfTheDay, setSongOfTheDay] = useState({});\n  // TODO (TASK 13): add a state variable to store the app author (default to '')\n  const [author, setAuthor] = useState(\"\");\n\n  const [selectedSongId, setSelectedSongId] = useState(null);\n\n  // The useEffect hook by default runs the provided callback after every render\n  // The second (optional) argument, [], is the dependency array which signals\n  // to the hook to only run the provided callback if the value of the dependency array\n  // changes from the previous render. In this case, an empty array means the callback\n  // will only run on the very first render.\n  useEffect(() => {\n    // Fetch request to get the song of the day. Fetch runs asynchronously.\n    // The .then() method is called when the fetch request is complete\n    // and proceeds to convert the result to a JSON which is finally placed in state.\n    fetch(`http://${config.server_host}:${config.server_port}/random`)\n      .then(res => res.json())\n      .then(resJson => setSongOfTheDay(resJson));\n\n    // TODO (TASK 14): add a fetch call to get the app author (name not pennkey) and store it in the state variable\n    fetch(`http://${config.server_host}:${config.server_port}/author/name`, {\n      method: \"GET\"\n    })\n      .then(res => res.text())\n      // .then(res => console.log(res));\n      .then(resJson => setAuthor(resJson));\n  }, []);\n\n  // Here, we define the columns of the \"Top Songs\" table. The songColumns variable is an array (in order)\n  // of objects with each object representing a column. Each object has a \"field\" property representing\n  // what data field to display from the raw data, \"headerName\" property representing the column label,\n  // and an optional renderCell property which given a row returns a custom JSX element to display in the cell.\n  const songColumns = [\n    {\n      field: 'title',\n      headerName: 'Song Title',\n      renderCell: (row) => <Link onClick={() => setSelectedSongId(row.song_id)}>{row.title}</Link> // A Link component is used just for formatting purposes\n    },\n    {\n      field: 'album',\n      headerName: 'Album',\n      renderCell: (row) => <NavLink to={`/albums/${row.album_id}`}>{row.album}</NavLink> // A NavLink component is used to create a link to the album page\n    },\n    {\n      field: 'plays',\n      headerName: 'Plays'\n    },\n  ];\n\n  // TODO (TASK 15): define the columns for the top albums (schema is Album Title, Plays), where Album Title is a link to the album page\n  // Hint: this should be very similar to songColumns defined above, but has 2 columns instead of 3\n  const albumColumns = [\n    {\n      field: 'title',\n      headerName: 'Album Title',\n      renderCell: (row) => <NavLink to={`/albums/${row.album_id}`}>{row.title}</NavLink> // A NavLink component is used to create a link to the album page\n    },\n    {\n      field: 'plays',\n      headerName: 'Plays'\n    },\n  ]\n\n  return (\n    <Container>\n      {/* SongCard is a custom component that we made. selectedSongId && <SongCard .../> makes use of short-circuit logic to only render the SongCard if a non-null song is selected */}\n      {selectedSongId && <SongCard songId={selectedSongId} handleClose={() => setSelectedSongId(null)} />}\n      <h2>Check out your song of the day:&nbsp;\n        <Link onClick={() => setSelectedSongId(songOfTheDay.song_id)}>{songOfTheDay.title}</Link>\n      </h2>\n      <Divider />\n      <h2>Top Songs</h2>\n      <LazyTable route={`http://${config.server_host}:${config.server_port}/top_songs`} columns={songColumns} />\n      <Divider />\n      {/* TODO (TASK 16): add a h2 heading, LazyTable, and divider for top albums. Set the LazyTable's props for defaultPageSize to 5 and rowsPerPageOptions to [5, 10] */}\n      <h2>Top Albums</h2>\n      <LazyTable route={`http://${config.server_host}:${config.server_port}/top_albums`} columns={albumColumns} defaultPageSize={5} rowsPerPageOptions={[5, 10]} />\n      <Divider />\n      {/* TODO (TASK 17): add a paragraph (<p>text</p>) that displays the value of your author state variable from TASK 13 */}\n    </Container>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}