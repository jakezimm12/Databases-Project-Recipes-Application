{"ast":null,"code":"var _jsxFileName = \"/Users/yue0815/Documents/GitHub/Schola/CIS550/HW2/client/src/components/SongCard.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Box, Button, ButtonGroup, Link, Modal } from '@mui/material';\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, RadarChart, Radar, PolarGrid, PolarAngleAxis, PolarRadiusAxis } from 'recharts';\nimport { NavLink } from 'react-router-dom';\nimport { formatDuration } from '../helpers/formatter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = require('../config.json');\n\n// SongCard is a modal (a common example of a modal is a dialog window).\n// Typically, modals will conditionally appear (specified by the Modal's open property)\n// but in our implementation whether the Modal is open is handled by the parent component\n// (see HomePage.js for example), since it depends on the state (selectedSongId) of the parent\nexport default function SongCard(_ref) {\n  _s();\n  let {\n    songId,\n    handleClose\n  } = _ref;\n  const [songData, setSongData] = useState({});\n  const [albumData, setAlbumData] = useState({});\n  const [barRadar, setBarRadar] = useState(true);\n\n  // TODO (TASK 20): fetch the song specified in songId and based on the fetched album_id also fetch the album data\n  // Hint: you need to both fill in the callback and the dependency array (what variable determines the information you need to fetch?)\n  // Hint: since the second fetch depends on the information from the first, try nesting the second fetch within the then block of the first (pseudocode is provided)\n  useEffect(SongCard => {\n    // Hint: here is some pseudocode to guide you\n    fetch(`http://${config.server_host}:${config.server_port}/song/${songId}`).then(res => res.json()).then(resJson => {\n      setSongData(resJson);\n      // set state variable with song data\n      fetch(`http://${config.server_host}:${config.server_port}/album/${songData.album_id}`).then(res => res.json()).then(resJson => setAlbumData(resJson));\n    });\n  }, [songData.album_id]);\n  const chartData = [{\n    name: 'Danceability',\n    value: songData.danceability\n  }, {\n    name: 'Energy',\n    value: songData.energy\n  }, {\n    name: 'Valence',\n    value: songData.valence\n  }];\n  const handleGraphChange = () => {\n    setBarRadar(!barRadar);\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    open: true,\n    onClose: handleClose,\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      p: 3,\n      style: {\n        background: 'white',\n        borderRadius: '16px',\n        border: '2px solid #000',\n        width: 600\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: songData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Album:\\xA0\", /*#__PURE__*/_jsxDEV(NavLink, {\n          to: `/albums/${albumData.album_id}`,\n          children: albumData.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Duration: \", formatDuration(songData.duration)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Tempo: \", songData.tempo, \" bpm\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Key: \", songData.key_mode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          disabled: barRadar,\n          onClick: handleGraphChange,\n          children: \"Bar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !barRadar,\n          onClick: handleGraphChange,\n          children: \"Radar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: 20\n        },\n        children:\n        // This ternary statement returns a BarChart if barRadar is true, and a RadarChart otherwise\n        barRadar ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          height: 250,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: chartData,\n            layout: \"vertical\",\n            margin: {\n              left: 40\n            },\n            children: [/*#__PURE__*/_jsxDEV(XAxis, {\n              type: \"number\",\n              domain: [0, 1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              type: \"category\",\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"value\",\n              stroke: \"#8884d8\",\n              fill: \"#8884d8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          height: 250,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Replace Me\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClose,\n        style: {\n          left: '50%',\n          transform: 'translateX(-50%)'\n        },\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(SongCard, \"WoVemAS9AzTHK3QZxf8tlwtJNtc=\");\n_c = SongCard;\nvar _c;\n$RefreshReg$(_c, \"SongCard\");","map":{"version":3,"names":["useEffect","useState","Box","Button","ButtonGroup","Link","Modal","ResponsiveContainer","BarChart","Bar","XAxis","YAxis","RadarChart","Radar","PolarGrid","PolarAngleAxis","PolarRadiusAxis","NavLink","formatDuration","config","require","SongCard","songId","handleClose","songData","setSongData","albumData","setAlbumData","barRadar","setBarRadar","fetch","server_host","server_port","then","res","json","resJson","album_id","chartData","name","value","danceability","energy","valence","handleGraphChange","display","justifyContent","alignItems","background","borderRadius","border","width","title","duration","tempo","key_mode","margin","left","transform"],"sources":["/Users/yue0815/Documents/GitHub/Schola/CIS550/HW2/client/src/components/SongCard.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Box, Button, ButtonGroup, Link, Modal } from '@mui/material';\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, RadarChart, Radar, PolarGrid, PolarAngleAxis, PolarRadiusAxis } from 'recharts';\nimport { NavLink } from 'react-router-dom';\n\nimport { formatDuration } from '../helpers/formatter';\nconst config = require('../config.json');\n\n// SongCard is a modal (a common example of a modal is a dialog window).\n// Typically, modals will conditionally appear (specified by the Modal's open property)\n// but in our implementation whether the Modal is open is handled by the parent component\n// (see HomePage.js for example), since it depends on the state (selectedSongId) of the parent\nexport default function SongCard({ songId, handleClose }) {\n  const [songData, setSongData] = useState({});\n  const [albumData, setAlbumData] = useState({});\n\n  const [barRadar, setBarRadar] = useState(true);\n\n  // TODO (TASK 20): fetch the song specified in songId and based on the fetched album_id also fetch the album data\n  // Hint: you need to both fill in the callback and the dependency array (what variable determines the information you need to fetch?)\n  // Hint: since the second fetch depends on the information from the first, try nesting the second fetch within the then block of the first (pseudocode is provided)\n  useEffect((SongCard) => {\n    // Hint: here is some pseudocode to guide you\n    fetch(`http://${config.server_host}:${config.server_port}/song/${songId}`)\n      .then(res => res.json())\n      .then(resJson => {\n        setSongData(resJson)\n        // set state variable with song data\n        fetch(`http://${config.server_host}:${config.server_port}/album/${songData.album_id}`)\n          .then(res => res.json())\n          .then(resJson => setAlbumData(resJson))\n        })\n  }, [songData.album_id]);\n\n  const chartData = [\n    { name: 'Danceability', value: songData.danceability },\n    { name: 'Energy', value: songData.energy },\n    { name: 'Valence', value: songData.valence },\n  ];\n\n  const handleGraphChange = () => {\n    setBarRadar(!barRadar);\n  };\n\n  return (\n    <Modal\n      open={true}\n      onClose={handleClose}\n      style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n    >\n      <Box\n        p={3}\n        style={{ background: 'white', borderRadius: '16px', border: '2px solid #000', width: 600 }}\n      >\n        <h1>{songData.title}</h1>\n        <h2>Album:&nbsp;\n          <NavLink to={`/albums/${albumData.album_id}`}>{albumData.title}</NavLink>\n        </h2>\n        <p>Duration: {formatDuration(songData.duration)}</p>\n        <p>Tempo: {songData.tempo} bpm</p>\n        <p>Key: {songData.key_mode}</p>\n        <ButtonGroup>\n          <Button disabled={barRadar} onClick={handleGraphChange}>Bar</Button>\n          <Button disabled={!barRadar} onClick={handleGraphChange}>Radar</Button>\n        </ButtonGroup>\n        <div style={{ margin: 20 }}>\n          { // This ternary statement returns a BarChart if barRadar is true, and a RadarChart otherwise\n            barRadar\n              ? (\n                <ResponsiveContainer height={250}>\n                  <BarChart\n                    data={chartData}\n                    layout='vertical'\n                    margin={{ left: 40 }}\n                  >\n                    <XAxis type='number' domain={[0, 1]} />\n                    <YAxis type='category' dataKey='name' />\n                    <Bar dataKey='value' stroke='#8884d8' fill='#8884d8' />\n                  </BarChart>\n                </ResponsiveContainer>\n              ) : (\n                <ResponsiveContainer height={250}>\n                  {/* TODO (TASK 21): display the same data as the bar chart using a radar chart */}\n                  {/* Hint: refer to documentation at https://recharts.org/en-US/api/RadarChart */}\n                  {/* Hint: note you can omit the <Legend /> element and only need one Radar element, as compared to the sample in the docs */}\n                  <div>Replace Me</div>\n                </ResponsiveContainer>\n              )\n          }\n        </div>\n        <Button onClick={handleClose} style={{ left: '50%', transform: 'translateX(-50%)' }} >\n          Close\n        </Button>\n      </Box>\n    </Modal>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}